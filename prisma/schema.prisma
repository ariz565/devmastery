// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blogs           Blog[]
  notes           Note[]
  leetcodeProblems LeetcodeProblem[]
  interviewNotes  InterviewNote[]
  topics          Topic[]
  subTopics       SubTopic[]
  
  // Study Room relationships
  ownedStudyRooms StudyRoom[] @relation("RoomOwner")
  studyRoomMembers StudyRoomMember[]
  sentInvitations StudyRoomInvitation[] @relation("InvitationSender")
  receivedInvitations StudyRoomInvitation[] @relation("InvitationReceiver")
  chatMessages    ChatMessage[]
  sharedFiles     SharedFile[]
  studyNotes      StudyNote[]

  @@map("users")
}

model Blog {
  id          String   @id @default(cuid())
  title       String
  content     String
  excerpt     String?
  coverImage  String?
  category    String
  subCategory String?
  tags        String[]
  published   Boolean  @default(false)
  readTime    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?

  topicId String?
  topic   Topic?  @relation(fields: [topicId], references: [id])
  
  subTopicId String?
  subTopic   SubTopic? @relation(fields: [subTopicId], references: [id])

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  tableOfContents TableOfContents[]

  @@map("blogs")
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  category  String
  subCategory String?
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topicId String?
  topic   Topic?  @relation(fields: [topicId], references: [id])
  
  subTopicId String?
  subTopic   SubTopic? @relation(fields: [subTopicId], references: [id])

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  tableOfContents TableOfContents[]

  @@map("notes")
}

model Topic {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  icon        String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subTopics SubTopic[]
  blogs     Blog[]
  notes     Note[]
  leetcodeProblems LeetcodeProblem[]
  tableOfContents TableOfContents[]

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("topics")
}

model SubTopic {
  id          String   @id @default(cuid())
  name        String
  slug        String
  description String?
  icon        String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  blogs     Blog[]
  notes     Note[]
  leetcodeProblems LeetcodeProblem[]

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([topicId, slug])
  @@map("sub_topics")
}

model TableOfContents {
  id                String   @id @default(cuid())
  title             String
  slug              String
  description       String?
  order             Int      @default(0)
  level             Int      @default(1) // 1 = main topic, 2 = subtopic, 3 = sub-subtopic
  parentId          String?
  parent            TableOfContents? @relation("TOCHierarchy", fields: [parentId], references: [id])
  children          TableOfContents[] @relation("TOCHierarchy")
  contentType       String   @default("section") // blog, note, leetcode, section
  estimatedReadTime Int?     @default(5)
  difficulty        String   @default("beginner") // beginner, intermediate, advanced
  isPublished       Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  topicId           String
  topic             Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  
  // Optional relations to actual content
  blogId            String?
  blog              Blog?    @relation(fields: [blogId], references: [id], onDelete: SetNull)
  noteId            String?
  note              Note?    @relation(fields: [noteId], references: [id], onDelete: SetNull)
  leetcodeId        String?
  leetcode          LeetcodeProblem? @relation(fields: [leetcodeId], references: [id], onDelete: SetNull)

  @@unique([topicId, slug])
  @@map("table_of_contents")
}

model LeetcodeProblem {
  id          String     @id @default(cuid())
  title       String
  description String
  difficulty  Difficulty
  tags        String[]
  solution    String
  explanation String?
  timeComplex String?
  spaceComplex String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  topicId String?
  topic   Topic?  @relation(fields: [topicId], references: [id])
  
  subTopicId String?
  subTopic   SubTopic? @relation(fields: [subTopicId], references: [id])

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  tableOfContents TableOfContents[]

  @@map("leetcode_problems")
}

model InterviewNote {
  id        String   @id @default(cuid())
  title     String
  content   String
  company   String?
  position  String?
  category  String
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("interview_notes")
}

enum Role {
  USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

// Study Room Models
model StudyRoom {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPrivate   Boolean  @default(false)
  maxMembers  Int      @default(10)
  roomCode    String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ownerId String
  owner   User   @relation("RoomOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  members     StudyRoomMember[]
  invitations StudyRoomInvitation[]
  messages    ChatMessage[]
  files       SharedFile[]
  notes       StudyNote[]

  @@map("study_rooms")
}

model StudyRoomMember {
  id       String   @id @default(cuid())
  role     MemberRole @default(MEMBER)
  joinedAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  studyRoomId String
  studyRoom   StudyRoom @relation(fields: [studyRoomId], references: [id], onDelete: Cascade)

  @@unique([userId, studyRoomId])
  @@map("study_room_members")
}

model StudyRoomInvitation {
  id        String           @id @default(cuid())
  status    InvitationStatus @default(PENDING)
  message   String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  senderId String
  sender   User   @relation("InvitationSender", fields: [senderId], references: [id], onDelete: Cascade)

  receiverId String
  receiver   User   @relation("InvitationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  studyRoomId String
  studyRoom   StudyRoom @relation(fields: [studyRoomId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId, studyRoomId])
  @@map("study_room_invitations")
}

model ChatMessage {
  id        String      @id @default(cuid())
  content   String
  type      MessageType @default(TEXT)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  studyRoomId String
  studyRoom   StudyRoom @relation(fields: [studyRoomId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model SharedFile {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  fileSize    Int
  mimeType    String
  url         String
  description String?
  createdAt   DateTime @default(now())

  uploaderId String
  uploader   User   @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

  studyRoomId String
  studyRoom   StudyRoom @relation(fields: [studyRoomId], references: [id], onDelete: Cascade)

  @@map("shared_files")
}

model StudyNote {
  id        String   @id @default(cuid())
  title     String
  content   String
  isPublic  Boolean  @default(false)
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  studyRoomId String
  studyRoom   StudyRoom @relation(fields: [studyRoomId], references: [id], onDelete: Cascade)

  @@map("study_notes")
}

enum MemberRole {
  MEMBER
  MODERATOR
  ADMIN
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum MessageType {
  TEXT
  FILE
  IMAGE
  SYSTEM
}
